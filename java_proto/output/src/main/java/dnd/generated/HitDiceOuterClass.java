// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared/hit_dice.proto

package dnd.generated;

public final class HitDiceOuterClass {
  private HitDiceOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface HitDiceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:HitDice)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 dice = 1;</code>
     * @return The dice.
     */
    int getDice();

    /**
     * <code>int32 count = 2;</code>
     * @return The count.
     */
    int getCount();

    /**
     * <code>int32 constant = 3;</code>
     * @return The constant.
     */
    int getConstant();
  }
  /**
   * Protobuf type {@code HitDice}
   */
  public static final class HitDice extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:HitDice)
      HitDiceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HitDice.newBuilder() to construct.
    private HitDice(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HitDice() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HitDice();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dnd.generated.HitDiceOuterClass.internal_static_HitDice_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dnd.generated.HitDiceOuterClass.internal_static_HitDice_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dnd.generated.HitDiceOuterClass.HitDice.class, dnd.generated.HitDiceOuterClass.HitDice.Builder.class);
    }

    public static final int DICE_FIELD_NUMBER = 1;
    private int dice_ = 0;
    /**
     * <code>int32 dice = 1;</code>
     * @return The dice.
     */
    @java.lang.Override
    public int getDice() {
      return dice_;
    }

    public static final int COUNT_FIELD_NUMBER = 2;
    private int count_ = 0;
    /**
     * <code>int32 count = 2;</code>
     * @return The count.
     */
    @java.lang.Override
    public int getCount() {
      return count_;
    }

    public static final int CONSTANT_FIELD_NUMBER = 3;
    private int constant_ = 0;
    /**
     * <code>int32 constant = 3;</code>
     * @return The constant.
     */
    @java.lang.Override
    public int getConstant() {
      return constant_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (dice_ != 0) {
        output.writeInt32(1, dice_);
      }
      if (count_ != 0) {
        output.writeInt32(2, count_);
      }
      if (constant_ != 0) {
        output.writeInt32(3, constant_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (dice_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, dice_);
      }
      if (count_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, count_);
      }
      if (constant_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, constant_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dnd.generated.HitDiceOuterClass.HitDice)) {
        return super.equals(obj);
      }
      dnd.generated.HitDiceOuterClass.HitDice other = (dnd.generated.HitDiceOuterClass.HitDice) obj;

      if (getDice()
          != other.getDice()) return false;
      if (getCount()
          != other.getCount()) return false;
      if (getConstant()
          != other.getConstant()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DICE_FIELD_NUMBER;
      hash = (53 * hash) + getDice();
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getCount();
      hash = (37 * hash) + CONSTANT_FIELD_NUMBER;
      hash = (53 * hash) + getConstant();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static dnd.generated.HitDiceOuterClass.HitDice parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static dnd.generated.HitDiceOuterClass.HitDice parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dnd.generated.HitDiceOuterClass.HitDice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dnd.generated.HitDiceOuterClass.HitDice prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code HitDice}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:HitDice)
        dnd.generated.HitDiceOuterClass.HitDiceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dnd.generated.HitDiceOuterClass.internal_static_HitDice_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dnd.generated.HitDiceOuterClass.internal_static_HitDice_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dnd.generated.HitDiceOuterClass.HitDice.class, dnd.generated.HitDiceOuterClass.HitDice.Builder.class);
      }

      // Construct using dnd.generated.HitDiceOuterClass.HitDice.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        dice_ = 0;
        count_ = 0;
        constant_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dnd.generated.HitDiceOuterClass.internal_static_HitDice_descriptor;
      }

      @java.lang.Override
      public dnd.generated.HitDiceOuterClass.HitDice getDefaultInstanceForType() {
        return dnd.generated.HitDiceOuterClass.HitDice.getDefaultInstance();
      }

      @java.lang.Override
      public dnd.generated.HitDiceOuterClass.HitDice build() {
        dnd.generated.HitDiceOuterClass.HitDice result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dnd.generated.HitDiceOuterClass.HitDice buildPartial() {
        dnd.generated.HitDiceOuterClass.HitDice result = new dnd.generated.HitDiceOuterClass.HitDice(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(dnd.generated.HitDiceOuterClass.HitDice result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.dice_ = dice_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.count_ = count_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.constant_ = constant_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dnd.generated.HitDiceOuterClass.HitDice) {
          return mergeFrom((dnd.generated.HitDiceOuterClass.HitDice)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dnd.generated.HitDiceOuterClass.HitDice other) {
        if (other == dnd.generated.HitDiceOuterClass.HitDice.getDefaultInstance()) return this;
        if (other.getDice() != 0) {
          setDice(other.getDice());
        }
        if (other.getCount() != 0) {
          setCount(other.getCount());
        }
        if (other.getConstant() != 0) {
          setConstant(other.getConstant());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                dice_ = input.readInt32();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                count_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                constant_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int dice_ ;
      /**
       * <code>int32 dice = 1;</code>
       * @return The dice.
       */
      @java.lang.Override
      public int getDice() {
        return dice_;
      }
      /**
       * <code>int32 dice = 1;</code>
       * @param value The dice to set.
       * @return This builder for chaining.
       */
      public Builder setDice(int value) {

        dice_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>int32 dice = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDice() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dice_ = 0;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <code>int32 count = 2;</code>
       * @return The count.
       */
      @java.lang.Override
      public int getCount() {
        return count_;
      }
      /**
       * <code>int32 count = 2;</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(int value) {

        count_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 count = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00000002);
        count_ = 0;
        onChanged();
        return this;
      }

      private int constant_ ;
      /**
       * <code>int32 constant = 3;</code>
       * @return The constant.
       */
      @java.lang.Override
      public int getConstant() {
        return constant_;
      }
      /**
       * <code>int32 constant = 3;</code>
       * @param value The constant to set.
       * @return This builder for chaining.
       */
      public Builder setConstant(int value) {

        constant_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 constant = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearConstant() {
        bitField0_ = (bitField0_ & ~0x00000004);
        constant_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:HitDice)
    }

    // @@protoc_insertion_point(class_scope:HitDice)
    private static final dnd.generated.HitDiceOuterClass.HitDice DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dnd.generated.HitDiceOuterClass.HitDice();
    }

    public static dnd.generated.HitDiceOuterClass.HitDice getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HitDice>
        PARSER = new com.google.protobuf.AbstractParser<HitDice>() {
      @java.lang.Override
      public HitDice parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<HitDice> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HitDice> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dnd.generated.HitDiceOuterClass.HitDice getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_HitDice_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_HitDice_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025shared/hit_dice.proto\"8\n\007HitDice\022\014\n\004di" +
      "ce\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\020\n\010constant\030\003 \001(" +
      "\005B\017\n\rdnd.generatedb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_HitDice_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_HitDice_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_HitDice_descriptor,
        new java.lang.String[] { "Dice", "Count", "Constant", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
